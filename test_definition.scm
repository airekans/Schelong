(load "unittest.scm")
(load "eval.scm")

(let ((output (defines-exps->let '((define a 1)) '((+ a 1)))))
  (expect-eq '(let ((a *unassigned*))
		(set! a 1)
		(+ a 1))
	     output))

(let ((output (defines-exps->let '((define a 1)
				   (define b (+ a 2)))
		'((+ a 1) (+ b 2)))))
  (expect-eq '(let ((a *unassigned*)
		    (b *unassigned*))
		(set! a 1)
		(set! b (+ a 2))
		(+ a 1)
		(+ b 2))
	     output))

(let ((output (defines-exps->let '((define (a x)
				     (+ x 1)))
		'((a 1)))))
  (expect-eq '(let ((a *unassigned*))
		(set! a (lambda (x) (+ x 1)))
		(a 1))
	     output))

(expect-eq '() (scan-out-defines '()))
(expect-eq '((+ 1 2) (* x y))
	   (scan-out-defines '((+ 1 2) (* x y))))

(let ((output (scan-out-defines '((define (even? n)
				    (if (= n 0)
					true
					(odd? (- n 1))))
				  (define (odd? n)
				    (if (= n 0)
					false
					(even? (- n 1))))
				  (if (or (even? x)
					  (odd? x))
				      (+ x 1)
				      (+ x 2))))))
  (expect-eq '(let ((even? *unassigned*)
		    (odd? *unassigned*))
		(set! even? (lambda (n)
			      (if (= n 0)
				  true
				  (odd? (- n 1)))))
		(set! odd? (lambda (n)
			     (if (= n 0)
				 false
				 (even? (- n 1)))))
		(if (or (even? x)
			(odd? x))
		    (+ x 1)
		    (+ x 2)))
	     output))

