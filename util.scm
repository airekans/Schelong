(define (concat a b)
  (if (null? a)
      b
      (cons (car a) (concat (cdr a) b))))

(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))

(define (announce-output string)
  (newline) (display string) (newline))

;;;; user-print is used to print the evaluated object in user-readable format.
;;;; This is used to avoid the complex output of the compound object.
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>))
      (display object)))

(define (make-line-col-index line col)
  (list line col))
(define (line-index lci) (car lci))
(define (col-index lci) (cadr lci))
(define (line-index-1+ lci)
  (make-line-col-index (1+ (line-index lci)) (col-index lci)))
(define (col-index-1+ lci)
  (make-line-col-index (line-index lci) (1+ (col-index lci))))

(define (make-indexed-token tok beg-cli end-cli)
  (list tok beg-cli end-cli))
(define (token itok) (car itok))
(define (beg-cli itok) (cadr itok))
(define (end-cli itok) (caddr itok))



(define	delimiters (char-set-union char-set:whitespace
				   (string->char-set "()")))

(define (make-stream)
  (let ((buffer "")
	(line-num -1)
	(col-num 0))
    (define (read-line-if-needed)
      (if (= (string-length buffer) col-num)
	  (begin (set! buffer (read-line))
		 (set! line-num (1+ line-num))
		 (set! col-num 0)
		 (read-line-if-needed))
	  #f))
    (define (read-char)
      (read-line-if-needed)
      (let ((c (string-ref buffer col-num)))
	(set! col-num (1+ col-num))
	c))
    (define (peek-char)
      (read-line-if-needed)
      (string-ref buffer col-num))
    (define (dispatch n)
      (cond ((eq? n 'read-char) read-char)
	    ((eq? n 'peek-char) peek-char)
	    ((eq? n 'get-col-num) (lambda () col-num))
	    ((eq? n 'get-line-num) (lambda () line-num))
	    (else (error "unknown method" n))))
    dispatch))
(define (stream-read-char s) ((s 'read-char)))
(define (stream-peek-char s) ((s 'peek-char)))
(define (stream-get-col-num s) ((s 'get-col-num)))
(define (stream-get-line-num s) ((s 'get-line-num)))

(define (read-sexp stream)
  (let ((c (stream-peek-char stream)))
    (if (char-set-member? delimiters c)
	(cond ((char-set-member? char-set:whitespace c)
	       (begin (stream-read-char stream)
		      (read-sexp)))
	      ((char=? #\( c) ))
	(read-atom (make-line-col-index
			     (stream-get-line-num stream)
			     (stream-get-col-num stream))))))

(define (read-list stream)
  (define (read-list-without-paren)
    (let ((c (stream-peek-char stream)))
      (cond ((char=? #\) c)
	     (begin (stream-read-char stream)
		    '()))
	    ((char-set-member? char-set:whitespace c)
	     (begin (stream-read-char stream)
		    (read-list-without-paren)))
	    (else (let ((sexp (read-sexp stream)))
		    (if (null? sexp)
			sexp
			(cons sexp
			      (read-list-without-paren stream))))))))
  (let ((c (stream-peek-char stream)))
    (if (char=? #\( c)
	(let* ((beg (make-line-col-index (stream-get-line-num stream)
					(stream-get-col-num stream)))
	       (l (begin (stream-read-char stream)
			 (read-list-without-paren)))
	       (end (make-line-col-index (stream-get-line-num stream)
					 (stream-get-col-num stream))))
	  (make-indexed-token l beg end))
	(else (error "unbalanced parentheses")))))

(define (read-atom stream)
  (let ((beg (make-line-col-index (stream-get-line-num stream)
				  (stream-get-col-num stream))))
    (define (read-atom-impl buffer end)
      (let ((c (stream-peek-char stream)))
	(if (or (eof-object? c) (char-set-member? delimiters c))
	    (make-indexed-token
	     (read (open-input-string
		    (reverse-string (list->string buffer)))) beg end)
	    (read-atom-impl (cons (stream-read-char stream) buffer)
			    (col-index-1+ end)))))
    (read-atom-impl '() beg)))

